@startuml

Main *-- ProgramControl
ProgramControl *-- MainMenu
ProgramControl *-- User
ProgramControl *-- DatabaseIO
MainMenu *-- AllGames
AllGames <|-- CardGames
CardGames *-- CardDeck
CardDeck *-- Card
AllGames <|-- DiceGames
Dice <|-- DiceGames
AllGames <|-- MiscGames
DiceGames <|-- Craps
MiscGames <|-- Roulette
CardGames <|-- BlackJack

class Main
class User{

- int userID
- String userName
- String password
- int balance

+ makeBet()
+ receivePrizeMoney()
+ addMoney()

+ constructor(int userID, String userName, String password, int balance)

}
class MainMenu{

+ login()
+ logOut()
+ seeUserBalance()
+ chooseGame()

}
class ProgramControl{

+ static User currentUser
+ Array<String>allGames
+ runCasino()



}

interface AllGames{

+ startGame()
+ StopGame()
+ chooseBet()
+ calculatePrizeMoney()
+ newRound()

}

Abstract class CardGames{

- boolean hasWon
- String name
- CardDeck currentDeck
+ constructor(boolean hasWon, String name)

}

class CardDeck{

- ArrayList<Card>cards
- ArrayList<Card>usedCards
- int cardAmount

+ shuffleCards()
+ drawFirstCard()
+ addUsedCards()
+ constructor(ArrayList<Card>cards, int cardAmount)

}

class Card{

- String name
- String suits
- int value

+ constructor(String name, String suits, int value)
+ get(name, suits, value)

}

interface Dice{
+ int rollDie()

}

Abstract Class DiceGames{
- Boolean hasWon
- ArrayList<Dice> numberOfDice
# int rollDie()

}

Class Craps{


}

Class Roulette{


}

Class BlackJack{


}

Abstract Class MiscGames{
- Boolean hasWon
- String name

}

class DatabaseIO{

+ loadUserData()
+ createNewUser()
+ updateUserBalance()

}


@enduml